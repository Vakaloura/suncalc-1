#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# @author Copyright (C) 2015-2016 Robin Schneider <ypid@riseup.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, version 3 of the
# License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
__author__ = 'Robin Schneider <ypid@riseup.net>'
__license__ = 'AGPL-3.0'

"""
README generator using Jinja2.
"""

__version__ = '0.5'

import json
import xml.etree.ElementTree
import jinja2
from argparse import ArgumentParser

args_parser = ArgumentParser(
    description=__doc__,
)
args_parser.add_argument(
    '-V', '--version',
    action='version',
    version='%(prog)s {version}'.format(version=__version__)
)
args_parser.add_argument(
    '-i', '--input-json-file',
    required=True,
    help="JSON file to decode and provide to Jinja2 as `meta`.",
)
args_parser.add_argument(
    '-t', '--input-template-file',
    required=True,
    help="File path of the template file.",
)
args_parser.add_argument(
    '-d', '--input-doc-xml-file',
    help="XML file generated by Haxe about a module.",
)
args_parser.add_argument(
    '-k', '--key-value',
    action='append',
    type=lambda kv: kv.split("="),
    help="Additional key value options to make available during templating.",
)
args = args_parser.parse_args()

with open(args.input_json_file) as data_file:
    meta = json.load(data_file)

template_vars = {
    'meta': meta,
    'source': {
        'meta': args.input_json_file,
        'template': args.input_template_file,
        'script': __file__,
    },
}

if args.key_value:
    template_vars['kv'] = dict([(elem[0], elem[1]) for elem in args.key_value])

if args.input_doc_xml_file:
    xml = xml.etree.ElementTree.parse(args.input_doc_xml_file).getroot()
    for haxe_class in xml.iter('class'):
        if 'path' in haxe_class.attrib and haxe_class.attrib['path'] == 'suncalc.SunCalc':
            haxe_doc = haxe_class.find('haxe_doc').text
    template_vars['haxe_doc'] = haxe_doc
    template_vars['source']['xml'] = args.input_doc_xml_file

templateLoader = jinja2.FileSystemLoader(searchpath='.')
templateEnv = jinja2.Environment(
    loader=templateLoader,
    undefined=jinja2.StrictUndefined,
    trim_blocks=True,
)
template = templateEnv.get_template(args.input_template_file)

print(template.render(template_vars))
